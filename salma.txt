the form of acp coords
0,0; 10,10; 20,5; 15,20; 5,15


v2 rn coords 100
14,41;52,48;8,58;4,4;51,14;77,12;42,6;45,45;54,38;88,47;32,15;18,52;81,16;3,34;89,58;60,28;24,29;38,59;94,2;72,55;10,35;98,13;6,2;93,42;5,53;15,32;46,3;9,46;7,57;68,25;28,56;36,1;100,37;41,23;26,4;96,44;21,2;85,51;99,18;57,49;65,27;33,36;91,5;75,39;17,48;2,54;67,17;19,11;47,50;78,24;31,20;1,26;83,43;63,9;71,21;44,40;25,30;100,19;66,33;40,1;70,22;35,52;80,7;76,10;49,26;39,42;29,16;11,4;73,34;95,31;62,57;16,5;79,47;30,45;92,14;56,24;22,37;100,59;64,12;43,31;87,6;55,43;20,44;13,28;82,29;69,70;37,55;100,60;58,13;27,5;74,62;86,8;50,2;97,66;53,68;23,65;100,69;52,71;34,72;100,76;59,77;48,78;2,83;100,84;61,85;42,86;24,87;100,88;57,89;46,90;32,91;100,92;54,93;45,94;31,95;100,96;51,97;44,98;30,99

14,41;52,48;8,58;4,4;51,14;77,12;42,6;
45,45;54,38;88,47;32,15;18,52;81,16;3,34;89,58;60,28;24,29;38,59;94,2;72,55;10,35;
98,13;6,2;93,42;5,53;15,32;46,3;9,46;7,57;68,25;28,56;36,1;100,37;41,23;26,4;96,44;
21,2;85,51;99,18;57,49;65,27;33,36;91,5;75,39;17,48;2,54;67,17;19,11;47,50;78,24;31,20;
1,26;83,43;63,9;71,21;44,40;25,30;100,19;66,33;40,1;70,22;35,52;80,7;76,10;49,26;39,42;29,16;
11,4;73,34;95,31;62,57;16,5;79,47;30,45;92,14;56,24;22,37;100,59;64,12;43,31;87,6;55,43;20,44;
13,28;82,29;69,70;37,55;100,60;58,13;27,5;74,62;86,8;50,2;97,66;53,68;23,65;100,69;52,71;34,72;
100,76;59,77;48,78;2,83;100,84;61,85;42,86;24,87;100,88;57,89;46,90;32,91;100,92;54,93;45,94;
31,95;100,96;51,97;44,98;30,99




# main information about the dataset
print("Dataset Information:")
print("Number of rows:", len(df))
print("Shape of the dataset:", df.shape)
print("Column names:", df.columns.tolist())
 print("Data types of columns:\n ", df.dtypes)

# coordinates
print("\nCoordinates:")
for i, coord in enumerate(coords):
    print(f"City {i+1}: ({coord[0]}, {coord[1]})")


#import seaborn as sns
# visualizing the distance matrix
def visualize_distance_matrix(distance_matrix):
    labels = [str(i) for i in range(len(distance_matrix))]
    sns.heatmap(distance_matrix, annot=True, cmap="YlGnBu", xticklabels=labels, yticklabels=labels)
    plt.show()

visualize_distance_matrix(distance_matrix)


#'''def visualize_cities(cities):
    x = [city.x for city in cities]
    y = [city.y for city in cities]
    plt.scatter(x, y)
    for i, city in enumerate(cities):
        plt.annotate(str(i), xy=(city.x, city.y))
    plt.show()

visualize_cities(cities)'''

# vs1 20 addt

def pso(cities, distance_matrix):
    population_size = 50
    max_iterations = 1000
    inertia_weight = 0.729
    cognitive_coefficient = 1.494
    social_coefficient = 1.494

    # Initialize population
    population = []
    for _ in range(population_size):
        solution = random.sample(range(len(cities)), len(cities))
        population.append(solution)

    # Evaluate fitness of each solution in the population
    fitness_values = np.array([calculate_fitness(solution, distance_matrix) for solution in population])

    # Main loop of PSO
    for iteration in range(max_iterations):
        for i in range(population_size):
            # Update velocities and positions
            velocity = inertia_weight * population[i] + cognitive_coefficient * random.random() * (best_solution[i] - population[i]) + social_coefficient * random.random() * (best_solution[i] - population[i-1])
            position = (velocity + population[i]) % len(cities)
            population[i] = position

            # Evaluate fitness of the updated solution
            fitness_value = calculate_fitness(position, distance_matrix)
            fitness_values[i] = fitness_value

            # Update best solution
            if fitness_value < calculate_fitness(best_solution, distance_matrix):
                best_solution = position

    return best_solution

def calculate_fitness(solution, distance_matrix):
    total_distance = 0
    for i in range(len(solution)):
        j = (i + 1) % len(solution)
        total_distance += distance_matrix[solution[i], solution[j]]
    return total_distance

# adtio

# Use the distance matrix to solve the TSP using PSO
best_route = pso(cities, distance_matrix)

# Print the best route and its total distance
print("Best route:", best_route)
print("Total distance:", 1 / calculate_fitness(best_route, distance_matrix))


# 2 50 v fn
# tsp_starter p1 fu

import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import euclidean

plt.ion()   # turn interactive mode on


def read_cities(filepath):

    cities = np.loadtxt(filepath, delimiter=',')
    return cities


def score_solution(cities, solution):

    if len(solution) != len(cities):
        raise Exception(('Invalid solution: len(solution) is {}, ' + \
                'but it should be {}.').format(len(solution), len(cities)))

    if set(solution) != set(range(len(cities))):
        raise Exception('Invalid solution: The solution does not ' + \
                'visit each city exactly once!')

    dist = 0.0
    for i in range(len(solution)):
        p_prev = cities[solution[i-1]]
        p_here = cities[solution[i]]
        dist += euclidean(p_prev, p_here)
    return dist


def create_figure():

    fig, axes = plt.subplots(1, 2, figsize=(15, 7))
    return fig, axes


def visualize_solution(cities, solution, fig=None, axes=None, block=True):

    dist = score_solution(cities, solution) if len(solution) == len(cities) else float('NaN')

    if fig is None or axes is None:
        fig, axes = create_figure()
    ax1, ax2 = axes
    fig.suptitle('Total Distance: {}'.format(dist), fontsize=20)

    ax1.clear()
    ax1.scatter(cities[:,0], cities[:,1])

    if len(solution) == len(cities):
        path = np.hstack((solution, solution[0]))  # <-- the salesperson has to return home!
    else:
        path = solution
    ax2.clear()
    ax2.plot(cities[path,0], cities[path,1])
    ax2.scatter(cities[:,0], cities[:,1])

    if block:
        while plt.fignum_exists(fig.number):
            plt.pause(0.001)
    else:
        plt.pause(0.001)


def tsp_solver_silly(cities, new_best_solution_func = None):

    best_dist = float("inf")
    best_solution = None
    for i in range(1000):
        solution = np.arange(len(cities))
        np.random.shuffle(solution)
        dist = score_solution(cities, solution)
        if dist < best_dist:
            best_dist = dist
            best_solution = solution
            if new_best_solution_func:
                new_best_solution_func(solution)
    return best_solution


if __name__ == '__main__':

    cities = read_cities('data/tiny.csv')

    show_progress = False

    if not show_progress:

        solution = tsp_solver_silly(cities)
        visualize_solution(cities, solution)

    else:

        fig, axes = create_figure()


        def visualize_wrapper(solution, is_final=False):
            print ('FINAL SOLUTION:' if is_final else 'Best so far:'), \
                    score_solution(cities, solution), solution
            visualize_solution(cities, solution, fig, axes, block=is_final)

        solution = tsp_solver_silly(cities, visualize_wrapper)
        visualize_wrapper(solution, True)


# v 51 p2 fn
# ryan_solu

from tsp_starter import read_cities, score_solution, \
                        create_figure, visualize_solution, \
                        euclidean


def brute_force_tsp_solver(cities, new_best_callback):
    best_dist = float("inf")
    best_solution = None
    indicies = np.arange(1, len(cities))  # we'll force starting at city 0
    for solution in permutations(indicies):
        solution = [0] + list(solution)   # remember, we start at city 0
        dist = score_solution(cities, solution)
        if dist < best_dist:
            best_dist = dist
            best_solution = solution
            new_best_callback(solution)
    return best_solution


def greedy_tsp_solver(cities, new_piece_callback, start_index=0):
    path = [start_index]
    visited = {start_index}
    new_piece_callback(path)
    num_cities = len(cities)
    while len(visited) < num_cities:
        curr_city = path[-1]
        nearest_city = None
        nearest_city_dist = float('inf')
        for i, city in enumerate(cities):
            if i in visited:
                continue
            dist = euclidean(cities[curr_city], city)
            if dist < nearest_city_dist:
                nearest_city = i
                nearest_city_dist = dist
        path.append(nearest_city)
        visited.add(nearest_city)
        new_piece_callback(path)
    return path


if __name__ == '__main__':

    if len(sys.argv) != 3:
        print('Usage: ipython {} <data_file_path> <bf|greedy>'.format(sys.argv[0]))
        sys.exit(1)

    data_file_path = sys.argv[1]
    algorithm = sys.argv[2]

    cities = read_cities(data_file_path)

    fig, axes = create_figure()

    if algorithm == 'bf':

        # Closure over cities, fig, and axes:
        def visualize_wrapper(solution, is_final=False):
            print(('FINAL SOLUTION:' if is_final else 'Best so far:'), \
                    score_solution(cities, solution), solution)
            visualize_solution(cities, solution, fig, axes, block=is_final)

        solution = brute_force_tsp_solver(cities, visualize_wrapper)
        visualize_wrapper(solution, True)

    elif algorithm == 'greedy':

        # Closure over cities, fig, and axes:
        def visualize_wrapper(solution, is_final=False):
            print(('FINAL SOLUTION:' if is_final else 'Best so far:'), solution)
            visualize_solution(cities, solution, fig, axes, block=is_final)

        best_score = float('inf')
        best_solution = None
        for start_index in range(len(cities)):
            solution = greedy_tsp_solver(cities, visualize_wrapper, start_index)
            visualize_wrapper(solution, False)
            score = score_solution(cities, solution)
            print('Score:', score)
            if score < best_score:
                best_score = score
                best_solution = solution
        visualize_wrapper(best_solution, True)

    else:
        print('Unknown algorithm')


# v 0.1 80 ut po ta ll


# tsp_pso
from operator import attrgetter
import random, sys, time, copy


# class that represents a graph
class Graph:

	def __init__(self, amount_vertices):
		self.edges = {} # dictionary of edges
		self.vertices = set() # set of vertices
		self.amount_vertices = amount_vertices # amount of vertices


	# adds a edge linking "src" in "dest" with a "cost"
	def addEdge(self, src, dest, cost = 0):
		# checks if the edge already exists
		if not self.existsEdge(src, dest):
			self.edges[(src, dest)] = cost
			self.vertices.add(src)
			self.vertices.add(dest)


	# checks if exists a edge linking "src" in "dest"
	def existsEdge(self, src, dest):
		return (True if (src, dest) in self.edges else False)


	# shows all the links of the graph
	def showGraph(self):
		print('Showing the graph:\n')
		for edge in self.edges:
			print('%d linked in %d with cost %d' % (edge[0], edge[1], self.edges[edge]))

	# returns total cost of the path
	def getCostPath(self, path):

		total_cost = 0
		for i in range(self.amount_vertices - 1):
			total_cost += self.edges[(path[i], path[i+1])]

		# add cost of the last edge
		total_cost += self.edges[(path[self.amount_vertices - 1], path[0])]
		return total_cost


	# gets random unique paths - returns a list of lists of paths
	def getRandomPaths(self, max_size):

		random_paths, list_vertices = [], list(self.vertices)

		initial_vertice = random.choice(list_vertices)
		if initial_vertice not in list_vertices:
			print('Error: initial vertice %d not exists!' % initial_vertice)
			sys.exit(1)

		list_vertices.remove(initial_vertice)
		list_vertices.insert(0, initial_vertice)

		for i in range(max_size):
			list_temp = list_vertices[1:]
			random.shuffle(list_temp)
			list_temp.insert(0, initial_vertice)

			if list_temp not in random_paths:
				random_paths.append(list_temp)

		return random_paths


# class that represents a complete graph
class CompleteGraph(Graph):

	# generates a complete graph
	def generates(self):
		for i in range(self.amount_vertices):
			for j in range(self.amount_vertices):
				if i != j:
					weight = random.randint(1, 10)
					self.addEdge(i, j, weight)


# class that represents a particle
class Particle:

	def __init__(self, solution, cost):

		# current solution
		self.solution = solution

		# best solution (fitness) it has achieved so far
		self.pbest = solution

		# set costs
		self.cost_current_solution = cost
		self.cost_pbest_solution = cost

		# velocity of a particle is a sequence of 4-tuple
		# (1, 2, 1, 'beta') means SO(1,2), prabability 1 and compares with "beta"
		self.velocity = []

	# set pbest
	def setPBest(self, new_pbest):
		self.pbest = new_pbest

	# returns the pbest
	def getPBest(self):
		return self.pbest

	# set the new velocity (sequence of swap operators)
	def setVelocity(self, new_velocity):
		self.velocity = new_velocity

	# returns the velocity (sequence of swap operators)
	def getVelocity(self):
		return self.velocity

	# set solution
	def setCurrentSolution(self, solution):
		self.solution = solution

	# gets solution
	def getCurrentSolution(self):
		return self.solution

	# set cost pbest solution
	def setCostPBest(self, cost):
		self.cost_pbest_solution = cost

	# gets cost pbest solution
	def getCostPBest(self):
		return self.cost_pbest_solution

	# set cost current solution
	def setCostCurrentSolution(self, cost):
		self.cost_current_solution = cost

	# gets cost current solution
	def getCostCurrentSolution(self):
		return self.cost_current_solution

	# removes all elements of the list velocity
	def clearVelocity(self):
		del self.velocity[:]


# PSO algorithm
class PSO:

	def __init__(self, graph, iterations, size_population, beta=1, alfa=1):
		self.graph = graph # the graph
		self.iterations = iterations # max of iterations
		self.size_population = size_population # size population
		self.particles = [] # list of particles
		self.beta = beta # the probability that all swap operators in swap sequence (gbest - x(t-1))
		self.alfa = alfa # the probability that all swap operators in swap sequence (pbest - x(t-1))

		# initialized with a group of random particles (solutions)
		solutions = self.graph.getRandomPaths(self.size_population)

		# checks if exists any solution
		if not solutions:
			print('Initial population empty! Try run the algorithm again...')
			sys.exit(1)

		# creates the particles and initialization of swap sequences in all the particles
		for solution in solutions:
			# creates a new particle
			particle = Particle(solution=solution, cost=graph.getCostPath(solution))
			# add the particle
			self.particles.append(particle)

		# updates "size_population"
		self.size_population = len(self.particles)


	# set gbest (best particle of the population)
	def setGBest(self, new_gbest):
		self.gbest = new_gbest

	# returns gbest (best particle of the population)
	def getGBest(self):
		return self.gbest


	# shows the info of the particles
	def showsParticles(self):

		print('Showing particles...\n')
		for particle in self.particles:
			print('pbest: %s\t|\tcost pbest: %d\t|\tcurrent solution: %s\t|\tcost current solution: %d' \
				% (str(particle.getPBest()), particle.getCostPBest(), str(particle.getCurrentSolution()),
							particle.getCostCurrentSolution()))
		print('')


	def run(self):

		# for each time step (iteration)
		for t in range(self.iterations):

			# updates gbest (best particle of the population)
			self.gbest = min(self.particles, key=attrgetter('cost_pbest_solution'))

			# for each particle in the swarm
			for particle in self.particles:

				particle.clearVelocity() # cleans the speed of the particle
				temp_velocity = []
				solution_gbest = copy.copy(self.gbest.getPBest()) # gets solution of the gbest
				solution_pbest = particle.getPBest()[:] # copy of the pbest solution
				solution_particle = particle.getCurrentSolution()[:] # gets copy of the current solution of the particle

				# generates all swap operators to calculate (pbest - x(t-1))
				for i in range(self.graph.amount_vertices):
					if solution_particle[i] != solution_pbest[i]:
						# generates swap operator
						swap_operator = (i, solution_pbest.index(solution_particle[i]), self.alfa)

						# append swap operator in the list of velocity
						temp_velocity.append(swap_operator)

						# makes the swap
						aux = solution_pbest[swap_operator[0]]
						solution_pbest[swap_operator[0]] = solution_pbest[swap_operator[1]]
						solution_pbest[swap_operator[1]] = aux

				# generates all swap operators to calculate (gbest - x(t-1))
				for i in range(self.graph.amount_vertices):
					if solution_particle[i] != solution_gbest[i]:
						# generates swap operator
						swap_operator = (i, solution_gbest.index(solution_particle[i]), self.beta)

						# append swap operator in the list of velocity
						temp_velocity.append(swap_operator)

						# makes the swap
						aux = solution_gbest[swap_operator[0]]
						solution_gbest[swap_operator[0]] = solution_gbest[swap_operator[1]]
						solution_gbest[swap_operator[1]] = aux


				# updates velocity
				particle.setVelocity(temp_velocity)

				# generates new solution for particle
				for swap_operator in temp_velocity:
					if random.random() <= swap_operator[2]:
						# makes the swap
						aux = solution_particle[swap_operator[0]]
						solution_particle[swap_operator[0]] = solution_particle[swap_operator[1]]
						solution_particle[swap_operator[1]] = aux

				# updates the current solution
				particle.setCurrentSolution(solution_particle)
				# gets cost of the current solution
				cost_current_solution = self.graph.getCostPath(solution_particle)
				# updates the cost of the current solution
				particle.setCostCurrentSolution(cost_current_solution)

				# checks if current solution is pbest solution
				if cost_current_solution < particle.getCostPBest():
					particle.setPBest(solution_particle)
					particle.setCostPBest(cost_current_solution)


if __name__ == "__main__":

	# creates the Graph instance
	graph = Graph(amount_vertices=5)

	# This graph is in the folder "images" of the repository.
	graph.addEdge(0, 1, 1)
	graph.addEdge(1, 0, 1)
	graph.addEdge(0, 2, 3)
	graph.addEdge(2, 0, 3)
	graph.addEdge(0, 3, 4)
	graph.addEdge(3, 0, 4)
	graph.addEdge(0, 4, 5)
	graph.addEdge(4, 0, 5)
	graph.addEdge(1, 2, 1)
	graph.addEdge(2, 1, 1)
	graph.addEdge(1, 3, 4)
	graph.addEdge(3, 1, 4)
	graph.addEdge(1, 4, 8)
	graph.addEdge(4, 1, 8)
	graph.addEdge(2, 3, 5)
	graph.addEdge(3, 2, 5)
	graph.addEdge(2, 4, 1)
	graph.addEdge(4, 2, 1)
	graph.addEdge(3, 4, 2)
	graph.addEdge(4, 3, 2)

	# creates a PSO instance
	pso = PSO(graph, iterations=100, size_population=10, beta=1, alfa=0.9)
	pso.run() # runs the PSO algorithm
	pso.showsParticles() # shows the particles

	# shows the global best particle
	print('gbest: %s | cost: %d\n' % (pso.getGBest().getPBest(), pso.getGBest().getCostPBest()))
